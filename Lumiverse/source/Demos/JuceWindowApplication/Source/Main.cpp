        /*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic startup code for a Juce application.
 
 ==============================================================================
 */

#include "GuiConfig.h"

#include "../JuceLibraryCode/JuceHeader.h"
#include "../../../LumiverseCore/LumiverseCore.h"

#include "RenderingWindow.h"

using namespace Lumiverse;

//==============================================================================
class JuceWindowAppApplication  : public JUCEApplication
{
public:
    //==============================================================================
    JuceWindowAppApplication() {}
    
    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }
    
    //==============================================================================
    void initialise (const String& commandLine) override
    {
        /*
        m_rig = new Rig("/afs/andrew.cmu.edu/usr1/chenxil/Documents/Lumiverse/Lumiverse/data/arnold_photometric.json");
        
        m_rig->init();
        
        ArnoldPatch *patch = (ArnoldPatch*)m_rig->getSimulationPatch();
        
        m_renderingWindow = new RenderingWindow(patch->getWidth(), patch->getHeight(),
                                                patch->getBufferPointer(), m_rig);
        
        m_timer = new RepaintTimer(m_renderingWindow->getContentComponent());
        m_timer->startTimer(1000);
        
        m_rig->run();
         */
        m_rig = new Rig("J:/Lumiverse/Lumiverse/data/arnold_photometric_cue.json");
        ArnoldAnimationPatch *app = (ArnoldAnimationPatch*)m_rig->getSimulationPatch("ArnoldAnimationPatch");
        
		if (app != NULL) {
			m_rig->init();
			m_rig->run();
			m_renderingWindow = new RenderingWindow(app->getWidth(), app->getHeight(),
				app->getBufferPointer(), m_rig);
		}
    }
    
    void shutdown() override
    {
        // Add your application's shutdown code here..
        m_rig->stop();

        m_renderingWindow = nullptr;
        m_rig = nullptr;
    }
    
    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }
    
    void anotherInstanceStarted (const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }
    
private:
    ScopedPointer<RenderingWindow> m_renderingWindow;
    ScopedPointer<Rig> m_rig;

};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (JuceWindowAppApplication)